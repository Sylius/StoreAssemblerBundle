#!/usr/bin/env bash
set -euo pipefail

# -----------------------------------------------------------------------------
#   Script: store-assembler
#   Orchestrates the BUILD, DEPLOY, and GET-PRESET operations for a Sylius store.
#   Supports downloading and extracting store presets by name.
# -----------------------------------------------------------------------------

# Color definitions
RED=$'\033[0;31m'
GREEN=$'\033[0;32m'
YELLOW=$'\033[0;33m'
BLUE=$'\033[0;34m'
BOLD=$'\033[1m'
RESET=$'\033[0m'

usage() {
  cat <<EOF
${BOLD}Usage:${RESET} $(basename "$0") [--build] [--deploy] [--get-preset <preset-name>]

  --build    Execute store build steps (plugins, fixtures, themes)
  --deploy   Execute store deployment steps (drop/create DB, update schema, load fixtures)
  --get-preset <preset-name>   Download and extract a store-preset by name

If no flags are provided, both --build and --deploy sections will be executed sequentially.

Example:
  $(basename "$0") --build --deploy
EOF
  exit 1
}

# -----------------------------------------
# 1) Initialize flags
# -----------------------------------------
BUILD=false
DEPLOY=false
GET_PRESET=false
PRESET_NAME=""

if [ $# -eq 0 ]; then
  BUILD=true
  DEPLOY=true
else
  while [ "$#" -gt 0 ]; do
    case "$1" in
      --build)
        BUILD=true
        shift
        ;;
      --deploy)
        DEPLOY=true
        shift
        ;;
      --get-preset)
        GET_PRESET=true
        if [ -n "${2:-}" ]; then
          PRESET_NAME="$2"
          shift 2
        else
          echo -e "${RED}Error:${RESET} Missing preset name for --get-preset."
          usage
        fi
        ;;
      *)
        usage
        ;;
    esac
  done

  if ! $BUILD && ! $DEPLOY && ! $GET_PRESET; then
    echo -e "${RED}Error:${RESET} You must specify at least --build, --deploy, or --get-preset."
    usage
  fi
fi

# -----------------------------------------
# Preset download logic
# -----------------------------------------
if $GET_PRESET; then
  # BEGIN preset download logic
  REPO="Sylius/StorePreset"
  BRANCH="main"
  TARGET_DIR="store-presets"
  OUTPUT_DIR="store-preset"
  ZIP_URL="https://github.com/$REPO/archive/refs/heads/$BRANCH.zip"
  TMP_DIR=$(mktemp -d)
  ZIP_FILE="$TMP_DIR/archive.zip"

  echo -e "${BLUE}Downloading $REPO#$BRANCH â†’ $TARGET_DIR/${RESET}"
  curl -L "$ZIP_URL" -o "$ZIP_FILE"

  echo -e "${BLUE}Extracting archive...${RESET}"
  unzip -q "$ZIP_FILE" -d "$TMP_DIR"

  EXTRACTED_DIR="$TMP_DIR/$(basename "$REPO")-$BRANCH"

  echo -e "${BLUE}Cleaning any existing $OUTPUT_DIR directory...${RESET}"
  rm -rf "$OUTPUT_DIR"

  if [ ! -d "$EXTRACTED_DIR/$TARGET_DIR/$PRESET_NAME" ]; then
    echo -e "${RED}Error:${RESET} preset '$PRESET_NAME' not found in $REPO/$TARGET_DIR." >&2
    echo -e "${YELLOW}Available presets:${RESET}" >&2
    for d in "$EXTRACTED_DIR/$TARGET_DIR"/*; do
      [ -d "$d" ] && echo -e "  - ${YELLOW}$(basename "$d")${RESET}" >&2
    done
    exit 1
  fi

  echo -e "${GREEN}Moving preset '$PRESET_NAME' to $OUTPUT_DIR...${RESET}"
  mv "$EXTRACTED_DIR/$TARGET_DIR/$PRESET_NAME" "$OUTPUT_DIR"

  echo -e "${BLUE}Removing temporary files...${RESET}"
  rm -rf "$TMP_DIR"

  echo -e "${GREEN}Done!${RESET}"
  exit 0
fi
# END preset download logic

# -----------------------------------------
# 2) Determine project root
# -----------------------------------------
PROJECT_DIR="$(pwd)"
STORE_PRESET_FILE="$PROJECT_DIR/store-preset/store-preset.json"

# -----------------------------------------
# 3) Retrieve store name
# -----------------------------------------
if [ -f "$STORE_PRESET_FILE" ]; then
  STORE_NAME=$(php -r "echo json_decode(file_get_contents('$STORE_PRESET_FILE'), true)['name'] ?? '';"
)
else
  STORE_NAME=""
fi

# -----------------------------------------
# 4) BUILD
# -----------------------------------------
if $BUILD; then
  echo -e "${BLUE}${BOLD}=== [Store Assembler] BUILD ===${RESET}"

  echo -e "${BLUE}[Store Assembler] PLUGINS${RESET}"
  php bin/console sylius:store-assembler:plugin:prepare
  php bin/console assets:install --symlink --relative public
  php bin/console cache:clear --no-warmup
  php bin/console cache:warmup
  php bin/console sylius:store-assembler:plugin:install

  echo
  echo -e "${BLUE}[Store Assembler] FIXTURES${RESET}"
  php bin/console sylius:store-assembler:fixture:prepare

  echo
  echo -e "${BLUE}[Store Assembler] THEMES${RESET}"
  php bin/console cache:clear --no-warmup
  php bin/console cache:warmup
  php bin/console sylius:store-assembler:theme:prepare

  echo
  echo -e "${GREEN}[Store Assembler] BUILD completed successfully.${RESET}"
fi

# -----------------------------------------
# 5) DEPLOY
# -----------------------------------------
if $DEPLOY; then
  echo
  echo -e "${BLUE}${BOLD}=== [Store Assembler] DEPLOY ===${RESET}"
  echo -e "${BLUE}[Store Assembler] PLUGINS (updating DB schema)${RESET}"
  php bin/console doctrine:database:drop --if-exists -n --force
  php bin/console doctrine:database:create -n
  php bin/console doctrine:schema:update -n --force --complete

  echo -e "Rebuilding the cache to ensure all configurations are properly loaded..."
  php bin/console cache:clear --no-warmup
  php bin/console cache:warmup


  echo -e "${BLUE}[Store Assembler] FIXTURES${RESET}"
  php bin/console sylius:store-assembler:fixture:load


  echo
  echo -e "${GREEN}[Store Assembler] DEPLOY completed successfully.${RESET}"
fi

exit 0
